<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://tinybeachthor.github.io/rss.xml" rel="self" type="application/rss+xml" />

    <title>OBSERVATIONS</title>
    <description>random walk through time and space</description>
    <link>https://tinybeachthor.github.io</link>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Oct 2021 22:11:16 +0000</lastBuildDate>
    <ttl>1800</ttl>

    <item>
      <title>Kafkaesque Internet</title>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/kafkaesque-internet.html</link>
      <guid>https://tinybeachthor.github.io/post/kafkaesque-internet.html</guid>
      <description><![CDATA[<h1>Kafkaesque Internet</h1>
<blockquote>
<p><strong>DISCLAIMER</strong>: this is an article about the internet from purely
technological point of view.</p>
</blockquote>
<h2>What's the internet</h2>
<p>When we talk the Internet, we really mean the web.
And web is really just HTTP.</p>
<h2>How it works</h2>
<ol>
<li>Send <code>OPTIONS</code> to see available methods</li>
<li><code>GET</code> to retrieve content</li>
<li><code>PUT</code> to add content</li>
<li><code>POST</code> can update or do anything</li>
</ol>
<p>Except that's not how it works at all.</p>
<h2>How it actually works</h2>
<p>Pages update asynchronously.
Content comes from multiple sources.
Users submit multiple actions concurrently.
Analytics are collected about everything.
Content is generated on demand.</p>
<p>And no one wants to see it fail or worse freeze while loading.
And we would like everything to work offline.</p>
<h2>Intermission : GraphQL</h2>
<p>A nice real world example of a real world project recognizing the issues
of pulling content from multiple sources in various formats is GraphQL.</p>
<p>Send a single query describing the data you want.
Get it the way you want on a best effort basis.
(Even across multiple responses based on the priority.)</p>
<p>Updates are iffy, because we want to push the user actions to the server
ASAP, not wait and batch them.
Also can still fail...</p>
<h2>Eventual consistency required eventual delivery</h2>
<p>To avoid failure, let's log every action locally before trying to
execute it.
Write-ahead logs are a very elegant solution from the database world.</p>
<ol>
<li>Log the user action to a local persistent log.</li>
<li>Materialize the change into the local view.</li>
<li>At convenience / when available, sync the log with the server.</li>
</ol>
<p>When we synchronize the logs we make them available for other devices to
pull and materialize the collected actions locally themselves.
Careful about conflicts -- we need to be deliberate about the way we
handle conflicts.</p>
<p>Conflict resolution is very application specific and requires careful
planning.
Sometimes simple last write wins can work just fine, sometimes we need
to design the actions to not create conflicts (CRDTS), and sometimes we
need to be very granular and have multiple resolution strategies.
More about that some other time.</p>
<h2>Globally Persistent Connections</h2>
<p>A <code>User</code> can have multiple <code>Connection</code>s -- one per client.
<code>Connection</code> can be <code>active</code> or <code>inactive</code>.
<code>Active Connection</code> has a reserved data channel at the <code>Server</code> and will get
an update whenever connected.
An <code>active Connection</code> can be downgraded to <code>inactive</code> by the <code>Server</code>.
<code>Inactive Connection</code> will not get updated but overwritten by a clone of
an <code>active Connection</code> when connected to the <code>Server</code>.</p>
<p>Setting resource limits is necessary to guarantee quality of service.</p>
<p>We can be smart about transitioning <code>Connection</code>s to inactive though.</p>
<h2>What do we get?</h2>
<p>More like what do we not get?</p>
<ul>
<li>No errors! (just delays)</li>
<li>No contradictions in state (if we materialize correctly)</li>
<li>Full history (if we keep the logs)</li>
<li>User authentication (partially, through the logs; still need initial)</li>
</ul>
<p>All of that for free, just by using persistent connections.
And remember:</p>
<blockquote>
<p>Persistent connections are just write ahead logs.</p>
</blockquote>
<h2>Honorable mentions</h2>
<h3>Kafka</h3>
<p>Can we run it in browser?</p>
<h3>ZeroMQ</h3>
<p>Very cool project providing good abstractions over basic connections.
Not quite new Internet, just Internet on steroids. Still cool though.</p>
]]></description>
    </item>
    <item>
      <title>Personal computers, personal computing, and data</title>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/personal-computing.html</link>
      <guid>https://tinybeachthor.github.io/post/personal-computing.html</guid>
      <description><![CDATA[<h1>Personal computers, personal computing, and data</h1>
<ul>
<li>Cloud - I don't care where the computation happens</li>
<li>Von Neumann - data and operations are very simillar</li>
<li>S3 - almost</li>
<li>Erlang - systems that evolve</li>
</ul>
<h2>Cloud</h2>
<p>I don't even know where this blog is hosted at.
Somewhere in the cloud, who cares. As long as it works.</p>
<p>Well, it's hosted on GitHub pages.
I know where the sources are, everything is in git,
gets built and transformed for publishing, and checked right back into git.
Code and data together at last.</p>
<h2>Are databases evil?</h2>
<p>Von Neumann architecture.
Why treat data and computation differently?
Isn't treating data specially a huge regression?</p>
<p>I reckon the answer is the same as for another question:
Why would anyone write C in 2021?</p>
<p>Can we have one system to handle everything:
distribution, versioning, tables, assets, transformations, ...?
Can we use Erlang?</p>
<h2>State of the union</h2>
<p>Streaming architectures are moving in the general direction of the grand
unification of data and computation.
Still, how do you update the processors?</p>
<p>Blockchains come to mind here. Most are obsessing over semi-valid
visions or grandeur.
How did it work out for BitTorrent?
New internet... sure.</p>
<p>S3 is cool, as a simple abstraction over disk storage.</p>
<p>Honorable mentions:</p>
<ul>
<li>kubernetes and friends</li>
<li>virtualization</li>
<li>WASM</li>
</ul>
]]></description>
    </item>
    <item>
      <title>Towards EXPO2021</title>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/towards-expo-2021.html</link>
      <guid>https://tinybeachthor.github.io/post/towards-expo-2021.html</guid>
      <description><![CDATA[<h1>Towards EXPO2021</h1>
<blockquote>
<p>TODO: link to the project here</p>
</blockquote>
<p><a href="https://tinybeachthor.github.io/post/aframe-forking-required.html">Last year</a> I started a tradition of making a small self-contained technology art project.
The idea came from the necessity -- I needed a way to make photo
exhibition during a pandemic.
The answer was VR.</p>
<p>A year later and it is about time to start working on this year's
project.
Last year was VR.
It is very obvious where this is going.
We are building an AR experience!</p>
<h2>What's it gonna be</h2>
<p><img src="https://hypebeast.com/image/2021/07/adidas-yeezy-foam-runner-mx-cream-clay-official-look-release-info-gx8774-1.jpg" alt="YZY Foam Runner MX Cream Clay" /></p>
<p>The story behind the inspiration for the project is a classical one:</p>
<ol>
<li>Kanye teases new ugly shoes</li>
<li>Ugly shoes are releases in a limited run</li>
<li>No shoes...</li>
</ol>
<p>Though ugly, there is something really cool about the grown-like -- as
opposed to made -- structure of it.
Nature is cool.</p>
<p>Other cool grown-like things to investigate (concrete!):</p>
<p><img src="https://static.dezeen.com/uploads/2019/07/concrete-choreography-3d-printed-columns-stage-eth-zurich-students-switzerland_sq-c.jpg" alt="3D printed concrete columns" /></p>
<p><img src="https://www.sculpteo.com/blog/wp-content/uploads/2016/12/xtree1.jpg" alt="3D printed concrete tree-like structure" /></p>
<h2>What to do</h2>
<p>Let's grow virtual shoes on everyone's feet!</p>
<h3>AR rendering</h3>
<p><a href="https://svelthree.dev/">THREE.js + svelte</a></p>
<p>Should be fast enough, otherwise stitch all code together and hand
optimize the 3D rendering.
The biggest bottleneck should be the AR object detection.</p>
<h3>AR object detection</h3>
<p>We need to detect people's feet in the video.
Since people wear shoes a lot, we can get away by <a href="https://google.github.io/mediapipe/solutions/objectron.html">detecting shoes</a>.</p>
<p><em>Render the virtual shoes oversized.</em>
<div class='video-container'><iframe src='https://www.youtube.com/embed/cwQgjq0mCdE'></iframe></div></p>
<h3>Grow the shoes</h3>
<p>Simulate tentacles growing on top of a surface.</p>
<ol>
<li>Define shoe base geometry with equations</li>
<li>Determine shoe normals &amp; climb over the surface like a vine</li>
<li>Inflate the path with tentacle geometry</li>
</ol>
<p>Initialize RNG from the camera image -- needs to be robust.</p>
<h3>Library, Achievements, Socials</h3>
<p>Make this an &quot;experience&quot; with a library of saved models.
Share images to socials.
Add achievements to drive engagement.</p>
<h2>That's about it</h2>
<p>Rather complex all in all, but should be doable.</p>
<ol>
<li>Setup rendering</li>
<li>Create tentacle geometry</li>
<li>Simulate vine-like growth</li>
<li>Shoe detection from video stream</li>
<li>AR detect shoe positions</li>
<li>Place virtual shoe in space</li>
<li>Polish with engagement features</li>
</ol>
]]></description>
    </item>
    <item>
      <title>Keeping it safe with macros</title>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/racket-macros.html</link>
      <guid>https://tinybeachthor.github.io/post/racket-macros.html</guid>
      <description><![CDATA[<h1>Keeping it safe with macros</h1>
<p>Playing around with the excellent <a href="https://puredata.info/exhibition">pure data</a>,
embedding it in a racket framework to get the extra super freedom of expression.
How to abstract away all the C level details?
Syntax parameters!</p>
<h2>What is pure data?</h2>
<p>Visual programming environment for multimedia,
mostly sound.
Really great because of very fast feedback - hear changes live.
Also it's easier to see sound transformations wired on a patchboard.</p>
<p>There are some limitations, and some operations are not easily handled in pure data.
Possible to interface from pd outside, and from outside to pd -
<a href="https://github.com/libpd/libpd">libpd</a>.</p>
<h2>Embedding pure data patches</h2>
<p>How better to complement a fast prototyping framework than with the best LISP?
Enter <a href="https://racket-lang.org/">racket</a>.</p>
<p>To send some data and export a sound from pd instance,
a naive implementation yields the following:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(let ([pd (make-pd-instance)])</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a> (begin</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>  (pd-instance-open-project-patch pd &quot;kick.pd&quot;)</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_transient&quot; 0.035)</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_max_pitch&quot; 292.2)</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_fall_time_1&quot; 17.59)</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_break_pitch&quot; 83.89)</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_fall_time_2&quot; 1042.0)</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_amp_decay&quot; 1120.0)</span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>  (pd-instance-tick pd)</span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-bang pd &quot;kick_bang&quot;)</span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>  (begin0</span>
<span id="13"><a href="#13" aria-hidden="true" tabindex="-1"></a>    (pd-instance-export pd 5)</span>
<span id="14"><a href="#14" aria-hidden="true" tabindex="-1"></a>    #| ... |#</span>
<span id="15"><a href="#15" aria-hidden="true" tabindex="-1"></a>    #| close and free everything ... |#</span>
<span id="16"><a href="#16" aria-hidden="true" tabindex="-1"></a>    #| ... |#</span>
<span id="17"><a href="#17" aria-hidden="true" tabindex="-1"></a>    )))</span></code></pre></div>
<p>Gritty, chaotic, noisy and annoying. Very C.
A lot is left to be desired here,
especially since we have all these awesome metaprogramming features available in racket.</p>
<h2>What</h2>
<p>What can be improved?</p>
<ul>
<li>do not lose any flexibility</li>
<li>create / free pd instance automatically</li>
<li>make the pd commands available only inside the given context
(getting strong monadic vibes here)</li>
<li>hide repetitive passing of pd instance reference</li>
</ul>
<h2>How</h2>
<p>Now to implement it.</p>
<h3>Memory management</h3>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(define executor (make-will-executor))</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>(void (thread (lambda ()</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>                (let loop ()</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>                  (will-execute executor)</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>                  (loop)))))</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a></span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>(define (pd-instance-free pd)</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  (libpd_free_instance pd))</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a></span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>#| after creating a pd-instance: |#</span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>(will-register executor instance pd-instance-free)</span></code></pre></div>
<p>That should be enough to automatically the free once the pd-instance goes out of scope.</p>
<h3>Isolated context</h3>
<p>To create the pd-instance, pass it where necessary
and keep the pd specific functions only accesible in this context,
now this is asking for quite a lot.
Better bring out the big guns!
<a href="https://docs.racket-lang.org/reference/stxparam.html">Syntax parameters</a>
will let us dynamically re-bind syntax to different expressions depending on context.</p>
<p>At first we define empty syntax parameters
(these will result in an exception if evaluated):</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(require</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  racket/stxparam</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>  racket/splicing)</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a></span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>(define-syntax-parameter open-project-patch (syntax-rules ()))</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>(define-syntax-parameter send-float (syntax-rules ()))</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>(define-syntax-parameter send-bang (syntax-rules ()))</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>(define-syntax-parameter tick (syntax-rules ()))</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>(define-syntax-parameter export-rsound (syntax-rules ()))</span></code></pre></div>
<p><em>Ideally these would throw custom exceptions,
or result in a noop, or a sane default behavior.</em></p>
<p>And the context macro to substitute the parameters:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(define-syntax with-pd-instance</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  (syntax-rules ()</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>    [(_ (action args ...) ...)</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>     (let ([pd* (make-pd-instance)])</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>       (splicing-syntax-parameterize</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>         ([open-project-patch (lambda (stx) #&#39;(curry pd-instance-open-project-patch pd*))]</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>          [send-float (lambda (stx) #&#39;(curry pd-instance-send-float pd*))]</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>          [send-bang (lambda (stx) #&#39;(curry pd-instance-send-bang pd*))]</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>          [tick (lambda (stx) #&#39;(lambda () (curry pd-instance-tick pd*)))]</span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>          [export-rsound (lambda (stx) #&#39;(curry pd-instance-export-rsound pd*))])</span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>         (begin</span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>           ((action) args ...) ...)))]))</span></code></pre></div>
<p>When expanded, this will create a new pd-instance,
set the syntax parameters to pass the instance to the underlying function,
and unwrap the body of the macro otherwise unchanged.
(The freeing of the instance is already handled by the will-executor.)</p>
<p>Using the syntax parameters also guarantees that
<a href="http://scheme2011.ucombinator.org/papers/Barzilay2011.pdf">our macros are hygienic</a>.</p>
<h2>The final form</h2>
<p>Now this:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(let ([pd (make-pd-instance)])</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a> (begin</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>  (pd-instance-open-project-patch pd &quot;kick.pd&quot;)</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_transient&quot; 0.035)</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_max_pitch&quot; 292.2)</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_fall_time_1&quot; 17.59)</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_break_pitch&quot; 83.89)</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_fall_time_2&quot; 1042.0)</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-float pd &quot;kick_amp_decay&quot; 1120.0)</span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>  (pd-instance-tick pd)</span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>  (pd-instance-send-bang pd &quot;kick_bang&quot;)</span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>  (begin0</span>
<span id="13"><a href="#13" aria-hidden="true" tabindex="-1"></a>    (pd-instance-export pd 5)</span>
<span id="14"><a href="#14" aria-hidden="true" tabindex="-1"></a>    #| ... |#</span>
<span id="15"><a href="#15" aria-hidden="true" tabindex="-1"></a>    #| close and free everything ... |#</span>
<span id="16"><a href="#16" aria-hidden="true" tabindex="-1"></a>    #| ... |#</span>
<span id="17"><a href="#17" aria-hidden="true" tabindex="-1"></a>    )))</span></code></pre></div>
<p>becomes:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>(with-pd-instance</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  (open-project-patch &quot;kick.pd&quot;)</span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_transient&quot; 0.035)</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_max_pitch&quot; 292.2)</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_fall_time_1&quot; 17.59)</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_break_pitch&quot; 83.89)</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_fall_time_2&quot; 1042.0)</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  (send-float &quot;kick_amp_decay&quot; 1120.0)</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>  (tick)</span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>  (send-bang &quot;kick_bang&quot;)</span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>  (export 5))</span></code></pre></div>
]]></description>
    </item>
    <item>
      <title>Future music is not human</title>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/future-music.html</link>
      <guid>https://tinybeachthor.github.io/post/future-music.html</guid>
      <description><![CDATA[<h1>Future music is not human</h1>
<p>I believe I have found the perfect song.</p>
<p><div class='video-container'><iframe src='https://www.youtube.com/embed/wWJFXAXEDWM?start=714'></iframe></div></p>
<p>It sounds different than usual song is expected to sound. There is no
solo, no vocals, no hook.
It prompted me to think about the future of music. Where it's heading
and where it can go. (With tangents of where it <strong>should</strong> go.)</p>
<blockquote>
<p><em>This is an opinion piece. Ye been warned.</em></p>
</blockquote>
<p>Music has always been made by humans driving (or playing) machines (or
instruments).
This has been becoming more and more automated and whole concerts can be
synthesized at will. Instead, people make trap music.
Highly repetitive simple samples filling space only by their volume.
Music is ripe for a revolution.</p>
<p>The technology is advancing rapidly, sound can be manipulated,
inspected, and created with the utmost precision.
We have all but total control over the sonic dominion.</p>
<blockquote>
<p>Nostalgia or stagnation?</p>
</blockquote>
<p>In the typical style of a transitional period:
technology progresses, but is being taken advantage of less.
Stagnation in place of experimentation.
To understand what could be, we need to explore the nature of music
generation first.
Let's look at some aspects of the technology and explore what the
opportunities for further automation are.</p>
<h2>Physical limits</h2>
<p>Music is structured sound. Sound is vibration of a medium (usually air),
captured by ears and interpreted by mind.</p>
<p>When synthesizing sound on a discreet-time machine (a computer), we are
limited by a chosen sampling rate - the sound we create is just a
sampled representation of the real thing.</p>
<p>As sound is a physical phenomenon, we need to model its behavior with a
model - use an approximation.
On the flip side, we are not limited by what is physically possible in
this world.
We could disregard the Doppler shift, make sound become
louder as it moves further away; taking things to the extreme:
underwater drums, instruments moving at supersonic speeds,
or non-euclidean recording rooms.</p>
<h2>Human attention limits</h2>
<p>Humans are attention optimizers, we have to be, we don't scale like
machines do. A computer can be told to spend twice as much time on
getting the extra 1%.</p>
<p>How many instruments can fit into a 3-minute track?
However many you have the patience to use.</p>
<h2>Final frontier</h2>
<blockquote>
<p>TODO: add a sample here (aka &quot;check out my SoundCloud&quot;)</p>
</blockquote>
<p>It would be easy to extrapolate these observations, go all doomsday, and
deduce that soon we are gonna have music so advanced you will need
cybernetic augments to enjoy it.
Such music will certainly exist, I would not be surprised if it already
does.</p>
<p>The vast majority of music won't evolve so dramatically. We will see more
music being produced. More genres, more variations, more combinations.
Music slowly approaching everyone's idea of perfection.
Bespoke music, on demand.</p>
<p>Whatever happens, music is an art form. And it will most likely always
exist in the current form. After all, more orchestral pieces are being
written now than ever before.</p>
]]></description>
    </item>
    <item>
      <title>A-FRAME - some forking required</title>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/aframe-forking-required.html</link>
      <guid>https://tinybeachthor.github.io/post/aframe-forking-required.html</guid>
      <description><![CDATA[<h1>A-FRAME - some forking required</h1>
<p>About building a VR photo album as this years' &quot;expo&quot;.
Here is the final result:</p>
<p><a href="https://expo.trestripes.com/2020/index.html">trestripes 2020 expo</a></p>
<p>This was built using the industry-standard, and the only full-fledged
solution to VR and AR website experiences - <a href="https://aframe.io/">&quot;A-FRAME&quot;</a>.
Here follows the very incomplete documentation of the whole process, and
some observations.</p>
<h2>Extensibility</h2>
<p>A-frame is a rather thin wrapper around THREE.js and the DOM. It does
not try to provide solutions to every use-case ever. But offers good
defaults and provides a standard way of extending it - writing custom
components.</p>
<p>Sounds great, but.
For this relatively small website, I had to create 2 custom components.
One for the layout and one for fitting geometry to the texture size.</p>
<p>These components were not custom, just customized - but still had to
fork the whole code.</p>
<h3>OO vs f</h3>
<p>This exposes the biggest issue with objects - they are entities of their
own. Encapsulating a certain behavior or workflow instead of an
operation, which could be rewired in a different way.</p>
<p>Because of needing to change a single line in the
<code>fit-texture-component</code> I will be stuck with maintaining the fork of
this component.</p>
<blockquote>
<p>When extensibility is a priority, objects are not an option.</p>
</blockquote>
<h3>Complex and Complicated</h3>
<p>Here is a nice overview of addressing innate complexity by Alan Kay.</p>
<p><div class='video-container'><iframe src='https://www.youtube.com/embed/ubaX1Smg6pY'></iframe></div></p>
<p>The overall idea of the talk is - even though some tasks are inherently
complex, we can split them into simpler atomic pieces and address them
one by one.</p>
<p>If we are able to solve the atomic pieces completely, such that the
complexity does not leak into other parts depending on this one, we have
successfully simplified the problem.</p>
]]></description>
    </item>
    <item>
      <title>Compute time for nothing and 3D models for free</title>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/3d-reconstruction.html</link>
      <guid>https://tinybeachthor.github.io/post/3d-reconstruction.html</guid>
      <description><![CDATA[<h1>Compute time for nothing and 3D models for free</h1>
<p>On my last outing, between lockdowns and preparing for exams, I went to
the local skatepark. It was much emptier than usual, although mostly
because of the meteorological conditions.</p>
<p>I always carry a <a href="https://www.sony.com/electronics/cyber-shot-compact-cameras/dsc-rx100">Sony RX100</a> on me, so I took some pics of the skating pool.</p>
<p>84 high-res photos (5488x3664px)</p>
<p>With the intent of turning it into a 3D model. Just to see what the
results gonna look like, to see what to watch out for and what is
possible to achieve today. A different kind of an arrow for the quiver.</p>
<p>I did not expect it go too well, but was pleasantly surprised by the result.</p>
<h2>AliceVision/Meshroom</h2>
<p><a href="https://alicevision.org/#meshroom">Meshroom</a></p>
<p>a photogammetry framework, <a href="https://github.com/alicevision/meshroom">open source</a>,
works on linux</p>
<p>However, to run the whole pipeline, CUDA is needed. Alas, I have no GPU.</p>
<p>Enter cloud computing.</p>
<h2>Google Colaboratory</h2>
<p>Notebook computing. Tesla K80, 12GB RAM Xeon 2.3GHz, 320GB. Wipe every
12 hours.</p>
<p><a href="https://colab.research.google.com/gist/natowi/3044484ad0c98877692c399297e3ab7e/meshroomcolab.ipynb">MeshroomColab</a></p>
<h2>Result</h2>
<blockquote>
<p>TODO</p>
</blockquote>
]]></description>
    </item>
    <item>
      <title>This blog : Origin</title>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/blog-origin.html</link>
      <guid>https://tinybeachthor.github.io/post/blog-origin.html</guid>
      <description><![CDATA[<h1>This blog : Origin</h1>
<p>I've decide to start a blog.</p>
<p>After a short-lasting affair with Medium, this time for real and doing it proper.
And after the final bit of procrastination - building a custom static
site generator - I'm ready.</p>
<h2>Why and What</h2>
<p>Two questions, one answer.</p>
<p>Blog is short for weblog. And that's my intention here. To keep a
public log of activities and ideas.</p>
<blockquote>
<p>The term &quot;weblog&quot; was coined by Jorn Barger on December 17, 1997.</p>
</blockquote>
<p>The motivation behind this blog is entirely selfish.
I intent to:</p>
<ol>
<li>Force myself to better formulate ideas and projects</li>
<li>Hold myself accountable</li>
<li>Keep a &quot;paper&quot; trail - for future reference and to share with others</li>
</ol>
<p>That's about enough for the start.</p>
<h2>How</h2>
<ul>
<li>Inspired by <a href="https://github.com/ChrisPenner/slick">slick</a> static site generator.</li>
<li>Uses the <a href="https://shakebuild.com/">shake build system</a>.
Renders markdown files into a static webpage and generates syndication feeds.</li>
<li>Reproducibly built using <a href="https://nixos.org/">nix</a>. And cached with <a href="https://cachix.org/">cachix</a>.</li>
<li>Automated CI deployment to Github Pages (using Github Action).</li>
</ul>
<p>TL;DR push and forget</p>
<h2>Legal</h2>
<ul>
<li>Copyright 2020 Martin Toman</li>
<li><a href="https://github.com/tinybeachthor/tinybeachthor.github.io/tree/master/posts">Content</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/posts/LICENSE">CC BY 4.0</a>.</li>
<li><a href="https://github.com/tinybeachthor/tinybeachthor.github.io">Code</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/LICENSE">BSD 3-Clause</a>.</li>
</ul>
<p><strong>I encourage everyone who would like to do so to fork my setup and use it for anythinig they like.</strong></p>
<h2>Conclusion</h2>
<p>Finally started a blog. Github centric setup.
Do the same, if you like.</p>
]]></description>
    </item>

  </channel>
</rss>
