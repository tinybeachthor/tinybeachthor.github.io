<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://tinybeachthor.github.io/rss.xml" rel="self" type="application/rss+xml" />

    <title>OBSERVATIONS</title>
    <description>random walk through time and space</description>
    <link>https://tinybeachthor.github.io</link>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 12:44:24 +0000</lastBuildDate>
    <ttl>1800</ttl>

    <item>
      <title>Universal REST client?</title>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/declarative-rest-text-client.html</link>
      <guid>https://tinybeachthor.github.io/post/declarative-rest-text-client.html</guid>
      <description><![CDATA[<h1>Universal REST client?</h1>
<p>There has to be a better way to chain API calls then using custom
clients.</p>
<p>For when one wants to manipulate or just bulk-read data from an API.</p>
<h2>The foundations</h2>
<p>Some observations regarding REST communication to keep in mind.</p>
<h3>All requests/responses are finite</h3>
<p>There are 9 operations in total: GET, HEAD, POST, PUT, PATCH, DELETE, CONNECT, OPTIONS and TRACE.
Where GET, PUT, POST, PATCH and DELETE are the ones used for data manipulation.</p>
<p>The length of the request body is limited by the encapsulating protocol (usually HTTP).</p>
<h3>It's all JSON</h3>
<p>The data is well structured, so matching and deconstructing is possible.</p>
<h3>Information in the structure</h3>
<p>The structure of the data contains information about the relationships
of data.</p>
<p>E.g. chaining an array response to a request with single field value in the query,
we know automatically to map the request over the array.</p>
<h2>Concrete example</h2>
<p>Let's say we want to:</p>
<p><strong>Like all songs in user's Spotify playlists.</strong></p>
<p>Or written in a more structured way:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>Spotify.me.playlists.songs</span>
<span id="2"><a href="#2" aria-hidden="true"></a>Spotify.like</span></code></pre></div>
<p>That little snippet completely describes the intent.
Now, just to execute it.</p>
<p><em>All request/response data &amp; samples taken from
<a href="https://developer.spotify.com/documentation/web-api/reference-beta/">Spotify Web API Reference</a>
on 2020-10-02 and is subject to change.</em></p>
<h3>Get playlists</h3>
<p>We start off with getting all user playlists.</p>
<p>Request:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>GET https://api.spotify.com/v1/me/playlists</span></code></pre></div>
<p><em>(With a required <code>Authorization</code> header - will deal with this later.)</em></p>
<p>Response body: (with fields omitted)</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a><span class="fu">{</span></span>
<span id="2"><a href="#2" aria-hidden="true"></a>  <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=1&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="3"><a href="#3" aria-hidden="true"></a>  <span class="dt">&quot;items&quot;</span> <span class="fu">:</span> <span class="ot">[</span> <span class="fu">{</span></span>
<span id="4"><a href="#4" aria-hidden="true"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="5"><a href="#5" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="6"><a href="#6" aria-hidden="true"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Okända katedralen i Dalsland&quot;</span><span class="fu">,</span></span>
<span id="7"><a href="#7" aria-hidden="true"></a>    <span class="er">...</span></span>
<span id="8"><a href="#8" aria-hidden="true"></a>  <span class="fu">}</span><span class="ot">,</span> <span class="fu">{</span></span>
<span id="9"><a href="#9" aria-hidden="true"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Electrolux och folkhemmets Elon Musk&quot;</span><span class="fu">,</span></span>
<span id="12"><a href="#12" aria-hidden="true"></a>    <span class="er">...</span></span>
<span id="13"><a href="#13" aria-hidden="true"></a>  <span class="fu">}</span> <span class="ot">]</span><span class="fu">,</span></span>
<span id="14"><a href="#14" aria-hidden="true"></a>  <span class="dt">&quot;limit&quot;</span> <span class="fu">:</span> <span class="dv">2</span><span class="fu">,</span></span>
<span id="15"><a href="#15" aria-hidden="true"></a>  <span class="dt">&quot;next&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=3&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="16"><a href="#16" aria-hidden="true"></a>  <span class="dt">&quot;offset&quot;</span> <span class="fu">:</span> <span class="dv">1</span><span class="fu">,</span></span>
<span id="17"><a href="#17" aria-hidden="true"></a>  <span class="dt">&quot;previous&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=0&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="18"><a href="#18" aria-hidden="true"></a>  <span class="dt">&quot;total&quot;</span> <span class="fu">:</span> <span class="dv">499</span></span>
<span id="19"><a href="#19" aria-hidden="true"></a><span class="fu">}</span></span></code></pre></div>
<p>And after depaginating:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a><span class="ot">[</span></span>
<span id="2"><a href="#2" aria-hidden="true"></a>  <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="5"><a href="#5" aria-hidden="true"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Okända katedralen i Dalsland&quot;</span><span class="fu">,</span></span>
<span id="6"><a href="#6" aria-hidden="true"></a>    <span class="er">...</span></span>
<span id="7"><a href="#7" aria-hidden="true"></a>  <span class="fu">}</span><span class="ot">,</span> <span class="fu">{</span></span>
<span id="8"><a href="#8" aria-hidden="true"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="9"><a href="#9" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Electrolux och folkhemmets Elon Musk&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true"></a>    <span class="er">...</span></span>
<span id="12"><a href="#12" aria-hidden="true"></a>  <span class="fu">}</span><span class="ot">,</span></span>
<span id="13"><a href="#13" aria-hidden="true"></a>  <span class="er">...</span></span>
<span id="14"><a href="#14" aria-hidden="true"></a><span class="ot">]</span></span></code></pre></div>
<p>Just a HTTP request and response. Nothing new yet.</p>
<h3>Get playlists' songs</h3>
<p>Next &quot;map&quot; this request over the previous response. (Without bothering
ourselves with too many details on how it would work in practice.)</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>GET https://api.spotify.com/v1/playlists/{playlist_id}/tracks</span></code></pre></div>
<p>Also need to translate <code>id</code> into <code>{playlist_id}</code></p>
<p><em>(Again with a required <code>Authorization</code> header.)</em></p>
<p>Response (after depaginating):</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a><span class="ot">[</span></span>
<span id="2"><a href="#2" aria-hidden="true"></a>  <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true"></a>    <span class="dt">&quot;added_at&quot;</span><span class="fu">:</span> <span class="st">&quot;2016-10-11T13:44:40Z&quot;</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true"></a>    <span class="dt">&quot;added_by&quot;</span><span class="fu">:</span> <span class="fu">{</span> <span class="er">...</span> <span class="fu">},</span></span>
<span id="5"><a href="#5" aria-hidden="true"></a>    <span class="dt">&quot;track&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="6"><a href="#6" aria-hidden="true"></a>      <span class="dt">&quot;album&quot;</span><span class="fu">:</span> <span class="fu">{</span> <span class="er">...</span> <span class="fu">},</span></span>
<span id="7"><a href="#7" aria-hidden="true"></a>      <span class="dt">&quot;artists&quot;</span><span class="fu">:</span> <span class="ot">[</span> <span class="er">...</span> <span class="ot">]</span><span class="fu">,</span></span>
<span id="8"><a href="#8" aria-hidden="true"></a>      <span class="dt">&quot;href&quot;</span><span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/tracks/7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="9"><a href="#9" aria-hidden="true"></a>      <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true"></a>      <span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;Otra Vez (feat. J Balvin)&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true"></a>      <span class="dt">&quot;uri&quot;</span><span class="fu">:</span> <span class="st">&quot;spotify:track:7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="12"><a href="#12" aria-hidden="true"></a>      <span class="er">...</span></span>
<span id="13"><a href="#13" aria-hidden="true"></a>    <span class="fu">},</span></span>
<span id="14"><a href="#14" aria-hidden="true"></a>    <span class="er">...</span></span>
<span id="15"><a href="#15" aria-hidden="true"></a>  <span class="fu">}</span><span class="ot">,</span></span>
<span id="16"><a href="#16" aria-hidden="true"></a>  <span class="er">...</span></span>
<span id="17"><a href="#17" aria-hidden="true"></a><span class="ot">]</span></span></code></pre></div>
<p>This is a straightforward transformation, we get the <code>id</code> after a single
unwrapping of the array - executing a query for every playlist object.</p>
<h3>Save tracks for user</h3>
<p>To &quot;like&quot; (or &quot;save&quot; in Spotify terminology) these tracks for the user,
we need to execute this request <em>(with <code>Authorization</code>, just like above)</em>.</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>PUT https://api.spotify.com/v1/me/tracks</span>
<span id="2"><a href="#2" aria-hidden="true"></a></span>
<span id="3"><a href="#3" aria-hidden="true"></a>{</span>
<span id="4"><a href="#4" aria-hidden="true"></a>  &quot;ids&quot;: [</span>
<span id="5"><a href="#5" aria-hidden="true"></a>    &quot;4iV5W9uYEdYUVa79Axb7Rh&quot;,</span>
<span id="6"><a href="#6" aria-hidden="true"></a>    &quot;1301WleyT98MSxVHPZCA6M&quot;,</span>
<span id="7"><a href="#7" aria-hidden="true"></a>    ...</span>
<span id="8"><a href="#8" aria-hidden="true"></a>  ],</span>
<span id="9"><a href="#9" aria-hidden="true"></a>}</span></code></pre></div>
<p>There is a maximum of 50 ids per request too.</p>
<p>We need to extract <code>track.id</code> from the array of tracks above, group them
by 50 and execute the <code>PUT</code> request above.</p>
<p>If all of these return <code>200 Success</code> we are done.</p>
<h2>Challenges</h2>
<p>Looks like there is no easy-ish way to make this work.</p>
<h3>JSON is not enough</h3>
<p>The JSON structure is not complete, and the missing domain-specific
details are too much to safely ignore.</p>
<p>For example matching something like</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a><span class="fu">{</span></span>
<span id="2"><a href="#2" aria-hidden="true"></a>  <span class="dt">&quot;track&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">1</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true"></a>  <span class="fu">},</span></span>
<span id="5"><a href="#5" aria-hidden="true"></a>  <span class="dt">&quot;album&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="6"><a href="#6" aria-hidden="true"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">1</span></span>
<span id="7"><a href="#7" aria-hidden="true"></a>  <span class="fu">},</span></span>
<span id="8"><a href="#8" aria-hidden="true"></a><span class="fu">}</span></span></code></pre></div>
<p>to a request requiring and <code>id</code> would need extra information to work.</p>
<h2>Conclusion</h2>
<p>There is some initiative solving API usability:</p>
<ol>
<li>
<p><a href="https://nordicapis.com/the-need-for-an-api-composition-layer/">API composition layer</a>
defining how to compose API's in another layer on top of API's
themselves.</p>
</li>
<li>
<p><a href="https://ieeexplore.ieee.org/document/8241498">Real-World RESTful Service Composition: A Transformation-Annotation-Discovery Approach</a>
using all sorts of fancy stuff (wordnet) to create a conceptual model
of the API, to facilitate human interaction.</p>
</li>
</ol>
<p>Until a clear solution arises, <code>bash</code>, <code>jq</code> and <code>curl</code> is the way to
go.</p>
]]></description>
    </item>
    <item>
      <title>This blog : Origin</title>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/blog-origin.html</link>
      <guid>https://tinybeachthor.github.io/post/blog-origin.html</guid>
      <description><![CDATA[<h1>This blog : Origin</h1>
<p>I've decide to start a blog.</p>
<p>After a short-lasting affair with Medium, this time for real and doing it proper.
And after the final bit of procrastination - building a custom static
site generator - I'm ready.</p>
<h2>Why and What</h2>
<p>Two questions, one answer.</p>
<p>Blog is short for weblog. And that's my intention here. To keep a
public log of activities and ideas.</p>
<blockquote>
<p>The term &quot;weblog&quot; was coined by Jorn Barger on December 17, 1997.</p>
</blockquote>
<p>The motivation behind this blog is entirely selfish.</p>
<p>I intent to:</p>
<ol>
<li>Force myself to better formulate ideas and projects</li>
<li>Hold myself accountable</li>
<li>Keep a &quot;paper&quot; trail - for future reference and to share with others</li>
</ol>
<p>That's about enough for the start.</p>
<h2>How</h2>
<p>Inspired by <a href="https://github.com/ChrisPenner/slick">slick</a> static site generator.</p>
<p>Uses the <a href="https://shakebuild.com/">shake build system</a>.
Renders markdown files into a static webpage and generates syndication feeds.</p>
<p>Reproducibly built using <a href="https://nixos.org/">nix</a>. And cached with <a href="https://cachix.org/">cachix</a>.</p>
<p>Automated CI deployment to Github Pages (using Github Action).</p>
<p>TL;DR push and forget</p>
<h3>Legal</h3>
<p>Copyright 2020 Martin Toman</p>
<p><a href="https://github.com/tinybeachthor/tinybeachthor.github.io/tree/master/posts">Content</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/posts/LICENSE">CC BY 4.0</a>.</p>
<p><a href="https://github.com/tinybeachthor/tinybeachthor.github.io">Code</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/LICENSE">BSD 3-Clause</a>.</p>
<p><strong>I encourage everyone who would like to do so to fork my setup and use it for anythinig they like.</strong></p>
<h2>Conclusion</h2>
<p>Finally started a blog. Github centric setup.</p>
<p>Do the same, if you like.</p>
]]></description>
    </item>
    <item>
      <title>Markdown Test</title>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/markdown-test.html</link>
      <guid>https://tinybeachthor.github.io/post/markdown-test.html</guid>
      <description><![CDATA[<h1>Markdown: Syntax</h1>
<ul>
<li><a href="#overview">Overview</a>
<ul>
<li><a href="#philosophy">Philosophy</a></li>
<li><a href="#html">Inline HTML</a></li>
<li><a href="#autoescape">Automatic Escaping for Special Characters</a></li>
</ul>
</li>
<li><a href="#block">Block Elements</a>
<ul>
<li><a href="#p">Paragraphs and Line Breaks</a></li>
<li><a href="#header">Headers</a></li>
<li><a href="#blockquote">Blockquotes</a></li>
<li><a href="#list">Lists</a></li>
<li><a href="#precode">Code Blocks</a></li>
<li><a href="#hr">Horizontal Rules</a></li>
</ul>
</li>
<li><a href="#span">Span Elements</a>
<ul>
<li><a href="#link">Links</a></li>
<li><a href="#em">Emphasis</a></li>
<li><a href="#code">Code</a></li>
<li><a href="#img">Images</a></li>
</ul>
</li>
<li><a href="#misc">Miscellaneous</a>
<ul>
<li><a href="#backslash">Backslash Escapes</a></li>
<li><a href="#autolink">Automatic Links</a></li>
</ul>
</li>
</ul>
<p><strong>Note:</strong> This document is itself written using Markdown; you
can <a href="/projects/markdown/syntax.text">see the source for it by adding '.text' to the URL</a>.</p>
<hr />
<h2>Overview</h2>
<h3>Philosophy</h3>
<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>
<p>Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it's been marked up with tags or formatting instructions. While
Markdown's syntax has been influenced by several existing text-to-HTML
filters -- including <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>, <a href="http://www.aaronsw.com/2002/atx/">atx</a>, <a href="http://textism.com/tools/textile/">Textile</a>, <a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>,
<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a>, and <a href="http://ettext.taint.org/doc/">EtText</a> -- the single biggest source of
inspiration for Markdown's syntax is the format of plain text email.</p>
<h2>Block Elements</h2>
<h3>Paragraphs and Line Breaks</h3>
<p>A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line -- a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be indented with spaces or tabs.</p>
<p>The implication of the &quot;one or more consecutive lines of text&quot; rule is
that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type's &quot;Convert Line Breaks&quot; option) which translate every line break
character in a paragraph into a <code>&lt;br /&gt;</code> tag.</p>
<p>When you <em>do</em> want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you
end a line with two or more spaces, then type return.</p>
<h3>Headers</h3>
<p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p>
<p>Optionally, you may &quot;close&quot; atx-style headers. This is purely
cosmetic -- you can use this if you think it looks better. The
closing hashes don't even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.)</p>
<h3>Blockquotes</h3>
<p>Markdown uses email-style <code>&gt;</code> characters for blockquoting. If you're
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a <code>&gt;</code> before every line:</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Markdown allows you to be lazy and only put the <code>&gt;</code> before the first
line of a hard-wrapped paragraph:</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of <code>&gt;</code>:</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<p>Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:</p>
<blockquote>
<h2>This is a header.</h2>
<ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>
<p>Here's some example code:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>return shell_exec(&quot;echo $input | $markdown_script&quot;);</span></code></pre></div>
</blockquote>
<p>Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.</p>
<h3>Lists</h3>
<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>
<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably
-- as list markers:</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>is equivalent to:</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>and:</p>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>Ordered lists use numbers followed by periods:</p>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<p>It's important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:</p>
<p>If you instead wrote the list in Markdown like this:</p>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<p>or even:</p>
<ol start="3">
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>
<p>you'd get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don't have to.</p>
<p>To make lists look nice, you can wrap items with hanging indents:</p>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>But if you want to be lazy, you don't have to:</p>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be indented by either 4 spaces
or one tab:</p>
<ol>
<li>
<p>This is a list item with two paragraphs. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit. Aliquam hendrerit
mi posuere lectus.</p>
<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet
vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
sit amet velit.</p>
</li>
<li>
<p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>
</li>
</ol>
<p>It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:</p>
<ul>
<li>
<p>This is a list item with two paragraphs.</p>
<p>This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.</p>
</li>
<li>
<p>Another item in the same list.</p>
</li>
</ul>
<p>To put a blockquote within a list item, the blockquote's <code>&gt;</code>
delimiters need to be indented:</p>
<ul>
<li>
<p>A list item with a blockquote:</p>
<blockquote>
<p>This is a blockquote
inside a list item.</p>
</blockquote>
</li>
</ul>
<p>To put a code block within a list item, the code block needs
to be indented <em>twice</em> -- 8 spaces or two tabs:</p>
<ul>
<li>
<p>A list item with a code block:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>&lt;code goes here&gt;</span></code></pre></div>
</li>
</ul>
<h3>Code Blocks</h3>
<p>Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code> tags.</p>
<p>To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab.</p>
<p>This is a normal paragraph:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>This is a code block.</span></code></pre></div>
<p>Here is an example of AppleScript:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>tell application &quot;Foo&quot;</span>
<span id="2"><a href="#2" aria-hidden="true"></a>    beep</span>
<span id="3"><a href="#3" aria-hidden="true"></a>end tell</span></code></pre></div>
<p>A code block continues until it reaches a line that is not indented
(or the end of the article).</p>
<p>Within a code block, ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> and <code>&gt;</code>)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown -- just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>&lt;div class=&quot;footer&quot;&gt;</span>
<span id="2"><a href="#2" aria-hidden="true"></a>    &amp;copy; 2004 Foo Corporation</span>
<span id="3"><a href="#3" aria-hidden="true"></a>&lt;/div&gt;</span></code></pre></div>
<p>Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it's also easy to use Markdown to write about Markdown's own syntax.</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a>tell application &quot;Foo&quot;</span>
<span id="2"><a href="#2" aria-hidden="true"></a>    beep</span>
<span id="3"><a href="#3" aria-hidden="true"></a>end tell</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="2"><a href="#2" aria-hidden="true"></a></span>
<span id="3"><a href="#3" aria-hidden="true"></a><span class="dt">int</span> main() {</span>
<span id="4"><a href="#4" aria-hidden="true"></a>   <span class="co">// printf() displays the string inside quotation</span></span>
<span id="5"><a href="#5" aria-hidden="true"></a>   printf(<span class="st">&quot;Hello, World!&quot;</span>);</span>
<span id="6"><a href="#6" aria-hidden="true"></a>   <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="7"><a href="#7" aria-hidden="true"></a>}</span></code></pre></div>
<h2>Span Elements</h2>
<h3>Links</h3>
<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>
<p>In both styles, the link text is delimited by [square brackets].</p>
<p>To create an inline link, use a set of regular parentheses immediately
after the link text's closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an <em>optional</em>
title for the link, surrounded in quotes. For example:</p>
<p>This is <a href="http://example.com/">an example</a> inline link.</p>
<p><a href="http://example.net/">This link</a> has no title attribute.</p>
<h3>Emphasis</h3>
<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of
emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an
HTML <code>&lt;em&gt;</code> tag; double <code>*</code>'s or <code>_</code>'s will be wrapped with an HTML
<code>&lt;strong&gt;</code> tag. E.g., this input:</p>
<p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<h3>Code</h3>
<p>To indicate a span of code, wrap it with backtick quotes (<code>`</code>).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:</p>
<p>Use the <code>printf()</code> function.</p>
]]></description>
    </item>
    <item>
      <title>Sample Post</title>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/sample-post.html</link>
      <guid>https://tinybeachthor.github.io/post/sample-post.html</guid>
      <description><![CDATA[<p>Welcome to your first blog post!</p>
]]></description>
    </item>

  </channel>
</rss>
