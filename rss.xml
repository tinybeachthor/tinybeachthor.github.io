<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <atom:link href="https://tinybeachthor.github.io/rss.xml" rel="self" type="application/rss+xml" />

    <title>OBSERVATIONS</title>
    <description>random walk through time and space</description>
    <link>https://tinybeachthor.github.io</link>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Oct 2020 09:41:29 +0000</lastBuildDate>
    <ttl>1800</ttl>

    <item>
      <title>Hacktoberfest 2020</title>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/hacktoberfest-2020.html</link>
      <guid>https://tinybeachthor.github.io/post/hacktoberfest-2020.html</guid>
      <description><![CDATA[<h1>Hacktoberfest 2020</h1>
<p><a href="https://drewdevault.com/2020/10/01/Spamtoberfest.html">The now infamous open-source &quot;promotion&quot; event.</a></p>
<p>I made my first open source contribution on github because of this event.
It works, in a way - gets people to contribute.
That was 4 years ago.</p>
<h2>2019</h2>
<p>I've accidentally completed the <a href="https://hacktoberfest.digitalocean.com/">hacktoberfest</a> last year, because of
pull-based development workflow we used at a closed-source (and would
not make much sense to be open source, as it was custom hardware,
bespoke made for a competition) project, which happened to be hosted on
github.</p>
<p>This together with merging some pull-requests on personal repos (they
were my PR's on my repos, too) made me accidentally complete the
hacktoberfest on the first day.</p>
<h2>2020</h2>
<p>Since then, I have first-hand observed some issues stemming from the
pull-based workflow and steered clear of it - towards trunk based
development (AKA rebase is your best friend) and made (almost) no more PRs.</p>
<p>I did not register for this year's hacktoberfest.</p>
<p>But I gained something much more valuable than a t-shirt - linear git history.</p>
<p>Perhaps the real t-shirt was the friends we made along the way.</p>
]]></description>
    </item>
    <item>
      <title>Universal REST client?</title>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/declarative-rest-text-client.html</link>
      <guid>https://tinybeachthor.github.io/post/declarative-rest-text-client.html</guid>
      <description><![CDATA[<h1>Universal REST client?</h1>
<p>There has to be a better way to chain API calls then using custom
clients.</p>
<p>For when one wants to manipulate or just bulk-read data from an API.</p>
<h2>The foundations</h2>
<p>Some observations regarding REST communication to keep in mind.</p>
<h3>All requests/responses are finite</h3>
<p>There are 9 operations in total: GET, HEAD, POST, PUT, PATCH, DELETE, CONNECT, OPTIONS and TRACE.
Where GET, PUT, POST, PATCH and DELETE are the ones used for data manipulation.</p>
<p>The length of the request body is limited by the encapsulating protocol (usually HTTP).</p>
<h3>It's all JSON</h3>
<p>The data is well structured, so matching and deconstructing is possible.</p>
<h3>Information in the structure</h3>
<p>The structure of the data contains information about the relationships
of data.</p>
<p>E.g. chaining an array response to a request with single field value in the query,
we know automatically to map the request over the array.</p>
<h2>Concrete example</h2>
<p>Let's say we want to:</p>
<p><strong>Like all songs in user's Spotify playlists.</strong></p>
<p>Or written in a more structured way:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>Spotify.me.playlists.songs</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>Spotify.like</span></code></pre></div>
<p>That little snippet completely describes the intent.
Now, just to execute it.</p>
<p><em>All request/response data &amp; samples taken from
<a href="https://developer.spotify.com/documentation/web-api/reference-beta/">Spotify Web API Reference</a>
on 2020-10-02 and is subject to change.</em></p>
<h3>Get playlists</h3>
<p>We start off with getting all user playlists.</p>
<p>Request:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>GET https://api.spotify.com/v1/me/playlists</span></code></pre></div>
<p><em>(With a required <code>Authorization</code> header - will deal with this later.)</em></p>
<p>Response body: (with fields omitted)</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=1&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;items&quot;</span> <span class="fu">:</span> <span class="ot">[</span> <span class="fu">{</span></span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Okända katedralen i Dalsland&quot;</span><span class="fu">,</span></span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>    <span class="er">...</span></span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span><span class="ot">,</span> <span class="fu">{</span></span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Electrolux och folkhemmets Elon Musk&quot;</span><span class="fu">,</span></span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>    <span class="er">...</span></span>
<span id="13"><a href="#13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span> <span class="ot">]</span><span class="fu">,</span></span>
<span id="14"><a href="#14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;limit&quot;</span> <span class="fu">:</span> <span class="dv">2</span><span class="fu">,</span></span>
<span id="15"><a href="#15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;next&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=3&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="16"><a href="#16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;offset&quot;</span> <span class="fu">:</span> <span class="dv">1</span><span class="fu">,</span></span>
<span id="17"><a href="#17" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;previous&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/shows/38bS44xjbVVZ3No3ByF1dJ/episodes?offset=0&amp;limit=2&quot;</span><span class="fu">,</span></span>
<span id="18"><a href="#18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;total&quot;</span> <span class="fu">:</span> <span class="dv">499</span></span>
<span id="19"><a href="#19" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>And after depaginating:</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a><span class="ot">[</span></span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;0Q86acNRm6V9GYx55SXKwf&quot;</span><span class="fu">,</span></span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Okända katedralen i Dalsland&quot;</span><span class="fu">,</span></span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>    <span class="er">...</span></span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span><span class="ot">,</span> <span class="fu">{</span></span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;href&quot;</span> <span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/episodes/1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span> <span class="fu">:</span> <span class="st">&quot;1spUiev4ggXPq95a7KKHjW&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;Electrolux och folkhemmets Elon Musk&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>    <span class="er">...</span></span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span><span class="ot">,</span></span>
<span id="13"><a href="#13" aria-hidden="true" tabindex="-1"></a>  <span class="er">...</span></span>
<span id="14"><a href="#14" aria-hidden="true" tabindex="-1"></a><span class="ot">]</span></span></code></pre></div>
<p>Just a HTTP request and response. Nothing new yet.</p>
<h3>Get playlists' songs</h3>
<p>Next &quot;map&quot; this request over the previous response. (Without bothering
ourselves with too many details on how it would work in practice.)</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>GET https://api.spotify.com/v1/playlists/{playlist_id}/tracks</span></code></pre></div>
<p>Also need to translate <code>id</code> into <code>{playlist_id}</code></p>
<p><em>(Again with a required <code>Authorization</code> header.)</em></p>
<p>Response (after depaginating):</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a><span class="ot">[</span></span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;added_at&quot;</span><span class="fu">:</span> <span class="st">&quot;2016-10-11T13:44:40Z&quot;</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;added_by&quot;</span><span class="fu">:</span> <span class="fu">{</span> <span class="er">...</span> <span class="fu">},</span></span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;track&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;album&quot;</span><span class="fu">:</span> <span class="fu">{</span> <span class="er">...</span> <span class="fu">},</span></span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;artists&quot;</span><span class="fu">:</span> <span class="ot">[</span> <span class="er">...</span> <span class="ot">]</span><span class="fu">,</span></span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;href&quot;</span><span class="fu">:</span> <span class="st">&quot;https://api.spotify.com/v1/tracks/7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="10"><a href="#10" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;name&quot;</span><span class="fu">:</span> <span class="st">&quot;Otra Vez (feat. J Balvin)&quot;</span><span class="fu">,</span></span>
<span id="11"><a href="#11" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;uri&quot;</span><span class="fu">:</span> <span class="st">&quot;spotify:track:7pk3EpFtmsOdj8iUhjmeCM&quot;</span><span class="fu">,</span></span>
<span id="12"><a href="#12" aria-hidden="true" tabindex="-1"></a>      <span class="er">...</span></span>
<span id="13"><a href="#13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">},</span></span>
<span id="14"><a href="#14" aria-hidden="true" tabindex="-1"></a>    <span class="er">...</span></span>
<span id="15"><a href="#15" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span><span class="ot">,</span></span>
<span id="16"><a href="#16" aria-hidden="true" tabindex="-1"></a>  <span class="er">...</span></span>
<span id="17"><a href="#17" aria-hidden="true" tabindex="-1"></a><span class="ot">]</span></span></code></pre></div>
<p>This is a straightforward transformation, we get the <code>id</code> after a single
unwrapping of the array - executing a query for every playlist object.</p>
<h3>Save tracks for user</h3>
<p>To &quot;like&quot; (or &quot;save&quot; in Spotify terminology) these tracks for the user,
we need to execute this request <em>(with <code>Authorization</code>, just like above)</em>.</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a>PUT https://api.spotify.com/v1/me/tracks</span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a></span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>  &quot;ids&quot;: [</span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>    &quot;4iV5W9uYEdYUVa79Axb7Rh&quot;,</span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>    &quot;1301WleyT98MSxVHPZCA6M&quot;,</span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a>  ],</span>
<span id="9"><a href="#9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>There is a maximum of 50 ids per request too.</p>
<p>We need to extract <code>track.id</code> from the array of tracks above, group them
by 50 and execute the <code>PUT</code> request above.</p>
<p>If all of these return <code>200 Success</code> we are done.</p>
<h2>Challenges</h2>
<p>Looks like there is no easy-ish way to make this work.</p>
<h3>JSON is not enough</h3>
<p>The JSON structure is not complete, and the missing domain-specific
details are too much to safely ignore.</p>
<p>For example matching something like</p>
<div class="sourceCode"><pre class="sourceCode"><code class="sourceCode"><span id="1"><a href="#1" aria-hidden="true" tabindex="-1"></a><span class="fu">{</span></span>
<span id="2"><a href="#2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;track&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="3"><a href="#3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">1</span><span class="fu">,</span></span>
<span id="4"><a href="#4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="5"><a href="#5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">&quot;album&quot;</span><span class="fu">:</span> <span class="fu">{</span></span>
<span id="6"><a href="#6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="dv">1</span></span>
<span id="7"><a href="#7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">},</span></span>
<span id="8"><a href="#8" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>to a request requiring and <code>id</code> would need extra information to work.</p>
<h2>Conclusion</h2>
<p>There is some initiative solving API usability:</p>
<ol>
<li>
<p><a href="https://nordicapis.com/the-need-for-an-api-composition-layer/">API composition layer</a>
defining how to compose API's in another layer on top of API's
themselves.</p>
</li>
<li>
<p><a href="https://ieeexplore.ieee.org/document/8241498">Real-World RESTful Service Composition: A Transformation-Annotation-Discovery Approach</a>
using all sorts of fancy stuff (wordnet) to create a conceptual model
of the API, to facilitate human interaction.</p>
</li>
</ol>
<p>Until a clear solution arises, <code>bash</code>, <code>jq</code> and <code>curl</code> is the way to
go.</p>
]]></description>
    </item>
    <item>
      <title>This blog : Origin</title>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://tinybeachthor.github.io/post/blog-origin.html</link>
      <guid>https://tinybeachthor.github.io/post/blog-origin.html</guid>
      <description><![CDATA[<h1>This blog : Origin</h1>
<p>I've decide to start a blog.</p>
<p>After a short-lasting affair with Medium, this time for real and doing it proper.
And after the final bit of procrastination - building a custom static
site generator - I'm ready.</p>
<h2>Why and What</h2>
<p>Two questions, one answer.</p>
<p>Blog is short for weblog. And that's my intention here. To keep a
public log of activities and ideas.</p>
<blockquote>
<p>The term &quot;weblog&quot; was coined by Jorn Barger on December 17, 1997.</p>
</blockquote>
<p>The motivation behind this blog is entirely selfish.</p>
<p>I intent to:</p>
<ol>
<li>Force myself to better formulate ideas and projects</li>
<li>Hold myself accountable</li>
<li>Keep a &quot;paper&quot; trail - for future reference and to share with others</li>
</ol>
<p>That's about enough for the start.</p>
<h2>How</h2>
<p>Inspired by <a href="https://github.com/ChrisPenner/slick">slick</a> static site generator.</p>
<p>Uses the <a href="https://shakebuild.com/">shake build system</a>.
Renders markdown files into a static webpage and generates syndication feeds.</p>
<p>Reproducibly built using <a href="https://nixos.org/">nix</a>. And cached with <a href="https://cachix.org/">cachix</a>.</p>
<p>Automated CI deployment to Github Pages (using Github Action).</p>
<p>TL;DR push and forget</p>
<h3>Legal</h3>
<p>Copyright 2020 Martin Toman</p>
<p><a href="https://github.com/tinybeachthor/tinybeachthor.github.io/tree/master/posts">Content</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/posts/LICENSE">CC BY 4.0</a>.</p>
<p><a href="https://github.com/tinybeachthor/tinybeachthor.github.io">Code</a>
licensed under <a href="https://github.com/tinybeachthor/tinybeachthor.github.io/blob/master/LICENSE">BSD 3-Clause</a>.</p>
<p><strong>I encourage everyone who would like to do so to fork my setup and use it for anythinig they like.</strong></p>
<h2>Conclusion</h2>
<p>Finally started a blog. Github centric setup.</p>
<p>Do the same, if you like.</p>
]]></description>
    </item>

  </channel>
</rss>
